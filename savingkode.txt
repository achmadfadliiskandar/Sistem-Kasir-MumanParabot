from flask import Flask,render_template,flash,request,url_for,session,redirect,Response
from flask_mysqldb import MySQL
from flask_bcrypt import Bcrypt
from pyzbar.pyzbar import decode
import MySQLdb.cursors
import re
import qrcode
import os
import cv2
import numpy as nmp

app = Flask(__name__,template_folder='template')
app.config['STATIC_FOLDER'] = 'static'
bycript = Bcrypt(app)

# KONFIGURASI DATABASE
app.secret_key = 'your secret key'
app.config['MYSQL_HOST'] = 'localhost'
app.config['MYSQL_USER'] = 'root'
app.config['MYSQL_PASSWORD'] = ''
app.config['MYSQL_DB'] = 'parabot'

mysql = MySQL(app)

# HALAMAN LOGIN
@app.route('/')
def login():
    if 'email' in session:
        return redirect(url_for('dasboardadmin'))
    return render_template("/login.html",title="Login")

# BACKEND LOGIN
@app.route('/',methods=['POST'])
def actionlogin():
    if request.method == 'POST' and 'email' in request.form and 'password' in request.form:
        email = request.form['email']
        password = request.form['password']
        cursor = mysql.connection.cursor(MySQLdb.cursors.DictCursor)
        cursor.execute("SELECT * FROM pengguna WHERE email = %s",(email,))
        pengguna = cursor.fetchone()

        if pengguna and bycript.check_password_hash(pengguna['password'],password) and pengguna['akses'] == "Diizinkan":
            session['id'] = pengguna['id']
            session['email'] = pengguna['email']
            session['username'] = pengguna['username']
            session['sebagai'] = pengguna['sebagai']
            return redirect("/DashboardAdmin")
        elif pengguna and bycript.check_password_hash(pengguna['password'],password) and pengguna['akses'] == "Tidak Diizinkan":
            pesan = "Anda Tidak Diizinkan Masuk Ke Situs Ini Silahkan Hubungi Admin"
        else:
            pesan = "password atau email salah kali"
        return render_template("login.html",pesan=pesan)
    
@app.route('/DashboardAdmin')
def dasboardadmin():
    if 'email' in session:
        return render_template("DashboardAdmin/index.html",title="Dashboard Admin",halpage="Dashboard")
    else:
        return redirect(url_for('login'))

# LOGOUT ADMIN
@app.route('/logout')
def keluar():
    session.pop('masuk',None)
    session.pop('id',None)
    session.pop('email',None)
    session.pop('username',None)
    return redirect(url_for('login'))

# DATA PENGGUNA/USER/ADMIN
@app.route('/datapengguna')
def semuadatauser():
    conn = mysql.connection
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM pengguna WHERE NOT sebagai='Admin'")
    pengguna = cursor.fetchall()
    if 'email' in session:
        return render_template("DashboardAdmin/datapengguna.html",title="Data Pengguna",halpage="Data Pengguna",pengguna=pengguna)
    else:
        return redirect(url_for('login'))

@app.route('/tambahpengguna',methods=['GET','POST'])
def tambahkanpengguna():
    if 'email' in session:
        if request.method == 'GET':
            return render_template("DashboardAdmin/tambahpengguna.html",title="Tambah Pengguna",halpage="Tambah Pengguna")
        if request.method == 'POST':
            username = request.form['username']
            email = request.form['email']
            password = request.form['password']
            akses = request.form['akses']
            sebagai = request.form['sebagai']
            hashingpw = bycript.generate_password_hash(password).decode('utf-8')
            val = (username,email,hashingpw,akses,sebagai)
            conn = mysql.connection
            cursor = conn.cursor()
            sql = "INSERT INTO pengguna (username,email,password,akses,sebagai) VALUES (%s,%s,%s,%s,%s)"
            cursor.execute(sql,val)
            conn.commit()
            flash("Data Berhasil Ditambahkan")
            return redirect(url_for("semuadatauser"))
        else:
            return redirect(url_for('login'))
        
@app.route('/deletepengguna/<int:id>',methods=['POST'])
def hapuspengguna(id):
    if 'email' in session:
        if request.method == "POST":
            conn = mysql.connection
            cursor = conn.cursor()
            cursor.execute("DELETE FROM pengguna WHERE id = %s",(id,))
            conn.commit()
            cursor.close()
            conn.close()
            flash("Data Berhasil Dihapus")
            return redirect(url_for("semuadatauser"))
        else:
            return redirect(url_for('login'))
    
@app.route('/editpengguna/<int:id>',methods=['GET','POST'])
def updatepengguna(id):
    if 'email' in session:
        if request.method == "GET":
            conn = mysql.connection
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM pengguna WHERE id = %s",(id,))
            data = cursor.fetchone()
            return render_template("DashboardAdmin/editpengguna.html",data=data,title=f"Edit {data[1]}",halpage=f"Edit {data[1]}")
        if request.method == "POST":
            if session['sebagai'] == 'Admin':
                username = request.form['username']
                email = request.form['email']
                akses = request.form['akses']
                sebagai = request.form['sebagai']
                conn = mysql.connection
                cursor = conn.cursor()
                sql = "UPDATE pengguna SET username=%s, email=%s, akses=%s, sebagai=%s WHERE id=%s"
                val = (username,email,akses,sebagai,id)
                cursor.execute(sql,val)
                conn.commit()
                flash("Data Berhasil Diubah")
                return redirect(url_for("semuadatauser"))
            if session['sebagai'] == "Pedagang":
                username = request.form['username']
                email = request.form['email']
                conn = mysql.connection
                cursor = conn.cursor()
                sql = "UPDATE pengguna SET username=%s, email=%s WHERE id=%s"
                val = (username,email,id)
                cursor.execute(sql,val)
                conn.commit()
                flash("Data Berhasil Diubah")
                return redirect(url_for("semuadatauser"))
        else:
            return redirect(url_for('login'))

#END BAGIAN DASHBOARD
# BAGIAN BARKODE
@app.route("/barcodescanner")
def BarcodeScanner():
    conn = mysql.connection
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM barcodebarang")
    barcodeharga = cursor.fetchall()
    if 'email' in session:
        return render_template("BarcodeScanner/index.html",title="Data Barcode",halpage="Data Barcode",barcodeharga = barcodeharga)
    else:
        return redirect(url_for('login'))
    
@app.route("/tambahbarcode")
def AddBarcode():
    if 'email' in session:
        return render_template("BarcodeScanner/tambahbarcode.html",title="Tambah Barcode",halpage="Tambah Barcode")
    else:
        return redirect(url_for('login'))
    
@app.route("/StoreBarcode",methods=['POST'])
def StoreBarcode():
    if 'email' in session:
        # mendata input manual dari html
        harga = request.form['harga']
        jumlah = 1
        # end mendata input manual dari html
        # bagian pengolah gambar
        data = harga
        output_dir = (r"C:\Users\X260\Desktop\python\belajarguipy\ScannerParabot\static\tempatbarcode")
        if not os.path.exists(output_dir):
            os.makedirs(output_dir)
        gambar = qrcode.make(data)
        img_path = os.path.join(output_dir,f'barcodeharga-{data}.png')
        gambar.save(img_path)
        # end bagian pengolah gambar
        # bagian masukin ke database
        conn = mysql.connection
        cursor = conn.cursor()
        sql = "INSERT INTO barcodebarang (harga,jumlah,gambarbarcode) VALUES (%s,%s,%s)"
        val = (harga,jumlah,f'barcodeharga-{data}.png')
        cursor.execute(sql,val)
        conn.commit()
        flash("Data Berhasil Ditambahkan")
        return redirect(url_for("BarcodeScanner"))
        # end bagian masukin ke database
    else:
        return redirect(url_for('login'))
    

# halaman kerja

@app.route('/halamankerja')
def PageWork():
        if 'email' in session:
            return render_template("HalamanKerja/index.html",title="Halaman Kerja",halpage="Halaman Kerja")
        else:
            return redirect(url_for('login'))
        

def frames():
    global scanned_data
    # bagian vidio dan proses scanner
    capture = cv2.VideoCapture(0)
    mydata = ""  # Initialize the variable to hold the QR code data
    frame = None  # Initialize the frame variable

    while True:
        success, frame = capture.read()
        if not success:
            break
        else:
            for barcode in decode(frame):
                scanned_data  = barcode.data.decode('utf-8')
                posisi = nmp.array([barcode.polygon], nmp.int32)
                posisi = posisi.reshape((-1, 1, 2))
                cv2.polylines(frame, [posisi], True, (255, 0, 255), 5)
                positioning = barcode.rect
                cv2.putText(frame, scanned_data, (positioning[0], positioning[1]),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.9, (255, 0, 255), 2)

        if frame is not None:
            ret, buffer = cv2.imencode('.jpg', frame)
            frame = buffer.tobytes()
            yield (b'--frame\r\n'
                b'Content-Type: image/jpeg\r\n\r\n' + frame + b'\r\n')
        # end proses dan bagian vidio

# adding vidio to html use js
@app.route('/rekamankerja')
def rekamankerja():
    return Response(frames(),mimetype='multipart/x-mixed-replace; boundary=frame')

@app.route('/get_qr_data')
def get_qr_data():
    global scanned_data   # Make sure to use the global variable
    return scanned_data 

# OPERATOR APLIKASI JANGAN DIGGANGGU
if __name__ == '__main__':
    app.run(debug=True)


/html

{% extends 'master/index.html' %}

<div class="container">
    {% block content %}
    <div class="row">
        <div class="col-lg-8 col-sm-8">
            <h1>Bagian Scanner</h1>
            <img src="{{url_for('rekamankerja')}}" style="width: 100%;height: 350px;" alt="">
        </div>
        <div class="col-lg-4 col-sm-4">
            <h2 class="text-capitalize">Perhitungan harga</h2>
            <div id="scanned-data">Scanned Data: {{ scanned_data }}</div>
        </div>
    </div>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        function updateScannedData() {
            $.get("/get_qr_data", function(data) {
                $("#scanned-data").text("Scanned Data: " + data);
                console.log(data)
            });
        }

        // Periodically update the scanned data
        setInterval(updateScannedData, 1000); // Update every 1 second
    </script>
    {% endblock %}
</div>
